
catalog: NexusAssistant

entity: NexusAssistant
role: service
purpose:
    - Bridges the gap between product specifications and implementation by providing contextual guidance
    - Enables product managers to manage requirements and create new features effectively
    - Enables developers to manage system design that supports product needs and to implement features
    - Enables AI agents to understand exact implementation requirements from product and architectural designs
    - Reduces miscommunication between product vision, system design and technical execution

properties:
    productView is @ProductView, collection of product-level views managed by the assistant
    systemDesignView is @SystemDesignView, collection of system design views managed by the assistant
    componentImplementations is @ComponentImplementation, collection of component-level implementations managed by the assistant

actions:
    provideImplementationContext: Generates @ImplementationContext on-demand by synthesizing product requirements and architectural decisions for specific implementation needs
    analyzeSpecifications: Examines @ProductView and @SystemDesignView to identify gaps, conflicts, or missing details
    traceRequirement: Traces a requirement from @ProductView through @SystemDesignView to @ComponentImplementation
    navigateLayers: Provides context across product, design, and implementation layers for a given feature
    identifyRelatedEntities: Determines which entities may be affected by changes or are important in a given context
    manageRequirements: Helps organize, track, and maintain @ProductView for product managers
    manageSystemDesign: Helps organize, track, and maintain @SystemDesignView for developers
    validateFeatureReadiness: Checks if new feature specifications are complete and ready for design and implementation

entity: ProductManager
role: actor
purpose:
    - Defines product requirements and creates new features in @ProductView
    - Manages the product vision and user-facing capabilities
    - Needs support to ensure specifications are complete and aligned with existing system

properties:
    assistant is @NexusAssistant, the assistant service used for requirements management

actions:
    defineRequirements: Creates and maintains @ProductView for new and existing features
    createFeature: Specifies new features and user capabilities in product views
    queryExistingFeatures: Asks @NexusAssistant about existing product capabilities and implementations

entity: Developer
role: actor
purpose: 
    - Software engineer who designs system architecture and implements features
    - Creates and maintains @SystemDesignView to support product needs
    - Requires clear, actionable guidance on how to translate product requirements into system design and code

properties:
    assistant is @NexusAssistant, the assistant service used for system design and implementation guidance

actions:
    queryAssistant: Asks @NexusAssistant for system design or implementation guidance on specific features or questions
    designSystem: Creates and maintains @SystemDesignView to support product requirements
    implementFeature: Writes code to implement features based on specifications and guidance received

entity: AIAgent
role: actor
purpose:
    - Autonomous assistant that helps manage product requirements, system design, and code implementation
    - Works across all three layers: product, design, and implementation
    - Needs precise context and constraints to generate appropriate artifacts

properties:
    assistant is @NexusAssistant, the assistant service used for product, design, and implementation guidance

actions:
    manageProductRequirements: Creates and maintains @ProductView based on user needs and business requirements
    manageSystemDesign: Creates and maintains @SystemDesignView to support product requirements
    requestContext: Requests @ImplementationContext from @NexusAssistant for a specific feature
    generateCode: Creates code that meets product and architectural requirements based on provided context

entity: ImplementationContext
role: component
purpose:
    - Synthesized guidance that combines product requirements with architectural decisions
    - Provides specific, actionable implementation instructions
    - Generated by @NexusAssistant for @Developer and @AIAgent consumption

entity: ProductView
role: component
purpose:
    - Represents the user-facing features and business capabilities
    - Describes WHAT the system does from customer and business perspective
    - Contains user journeys, business rules, and value propositions
    - Written in Nexus language focusing on WHY features exist

properties:
    systemDesigns is @SystemDesignView, collection of system designs that realize this product view

entity: SystemDesignView
role: component
purpose:
    - Represents the technical architecture and system structure
    - Describes HOW the system is organized at high level
    - Contains modules, services, data flows, data struct, schemas, and integration patterns
    - Written in Nexus language focusing on architectural decisions and patterns

properties:
    componentImplementations is @ComponentImplementation, collection of component implementations that realize this design

entity: ComponentImplementation
role: component
purpose:
    - Represents specific code-level components and their implementation details
    - Describes the actual technical implementation of features
    - Contains APIs, data structures, algorithms, and technical constraints
    - Written in Nexus language focusing on concrete implementation requirements

scenario: DeveloperSeeksImplementationGuidance
Given a developer working on a new feature
When they query the @NexusAssistant with a specific implementation question
Then the assistant analyzes both @ProductView and @SystemDesignView
And provides contextual implementation guidance 
And includes specific code patterns, constraints, and business logic requirements

scenario: AIAgentGeneratesCode
Given an @AIAgent tasked with implementing a feature
When it requests implementation context from @NexusAssistant
Then the assistant provides structured guidance including:
    - Business rules that must be enforced
    - Technical patterns to follow
    - Integration requirements with existing components
    - Validation and error handling requirements
And the AI agent can generate code that meets both product and architectural requirements

scenario: SpecificationAlignment
Given @ProductView and @SystemDesignView that may have gaps or conflicts
When @NexusAssistant analyzes them
Then it identifies missing implementation details
And highlights potential conflicts between product and design views
And suggests clarifications needed before implementation can proceed

scenario: MultiLayerNavigation
Given a developer or AI agent needs to understand a feature
When they query @NexusAssistant about the feature
Then the assistant provides context across all three layers:
    - @ProductView: WHY the feature exists and WHAT it does for users
    - @SystemDesignView: HOW the feature is architecturally structured
    - @ComponentImplementation: Specific technical details and code-level requirements
And enables navigation between layers to trace from business value to implementation

scenario: TraceRequirementToCode
Given a business requirement defined in @ProductView
When a developer needs to implement it
Then @NexusAssistant traces the requirement through @SystemDesignView to specific @ComponentImplementation
And shows which components implement which product features
And provides implementation guidance consistent across all three layers

rule: ContextualAccuracy
@NexusAssistant must only provide implementation guidance that is consistent with both product requirements and architectural constraints

rule: TraceabilityRequirement
Every implementation recommendation must be traceable back to specific product requirements or architectural decisions

rule: RealTimeAnalysis
@NexusAssistant must analyze specifications in real-time and provide up-to-date guidance based on the latest versions

rule: MultiPerspectiveIntegration
Implementation context must synthesize both product manager perspective (WHAT/WHY) and architect perspective (HOW) into actionable developer guidance

rule: ThreeLayerConsistency
Information must remain consistent across @ProductView, @SystemDesignView, and @ComponentImplementation layers

rule: BidirectionalTraceability
The assistant must support tracing both top-down (from product to component) and bottom-up (from component to product value)

rule: RelationalImpactAnalysis
@NexusAssistant must identify and present all related entities that may be affected by changes or whose relations are important to consider in any context, including implementation, design decisions, product changes, or understanding existing features